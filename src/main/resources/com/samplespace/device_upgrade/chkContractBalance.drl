package com.samplespace.device_upgrade;

import com.samplespace.device_upgrade.customer;
import com.samplespace.device_upgrade.custRuleChkRes;

import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.temporal.ChronoUnit;
import java.time.LocalDate;

function boolean chkContractEndDate(String contractEndDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date passedDate = dateFormat.parse(contractEndDate);
    //upgRes.setIsContractOver(passedDate.after(new Date()));
    return passedDate.after(new Date());
}

function boolean getBalance(int monthlyPay, String contractEndDate) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String currDate = dateFormat.format(new Date());
    Date passedDate = dateFormat.parse(contractEndDate);
    int accBalance = (int) (Math.ceil((double) ChronoUnit.DAYS.between(LocalDate.parse(currDate), LocalDate.parse(contractEndDate))/30) * monthlyPay);
    //upgRes.setBalanceDue(accBalance);
    return true;
}

rule "chkContract"
    ruleflow-group "chkContract"
	when
		//offer: customer()
		//offer: customer(chkContractEndDate(customer.contract.endDate), getBalance(customer.contract.monthlyPayment, customer.contract.endDate))
		offer: customer(customer.contract.endDate after new Date())
	then
        offer.setName("False");
	end
	
rule "chkContractA"
    ruleflow-group "chkContract"
	when
		//offer: customer()
		//offer: customer(chkContractEndDate(customer.contract.endDate), getBalance(customer.contract.monthlyPayment, customer.contract.endDate))
		offer: customer(customer.contract.endDate before "30-Jun-2020")
	then
        offer.setName("True");
	end